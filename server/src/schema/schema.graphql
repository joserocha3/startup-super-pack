# This file contains the application server schema. Here we only
# expose fields we want accessible from the client.

directive @isAuthenticated(checkIfEmailIsVerified: Boolean = false) on FIELD | FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD | FIELD_DEFINITION
directive @date(format: String) on FIELD_DEFINITION

scalar DateTime

enum Role {
  ADMIN
  CLIENT
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  role: Role!
  equipment: [Equipment!]
}

type EquipmentType {
  id: ID!
  description: String!
  equipments: [Equipment!]
}

type Equipment {
  id: ID!
  description: String!
  type: EquipmentType!
  owner: User!
}

type Availability {
  id: ID!
  equipment: Equipment!
  start: DateTime!
  end: DateTime!
  booked: Boolean
}

type Query {
  me: User @isAuthenticated
  users: [User!] @hasRole(roles:["ADMIN"])
  user(id: ID!): User! @hasRole(roles:["ADMIN"])
  equipmentTypes: [EquipmentType!]
  equipmentType(id: ID!): EquipmentType!
  equipments: [Equipment!]
  equipment(id: ID!): Equipment!
  availabilities: [Availability!]
  availability(id: ID!): Availability!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  role: Role!
}

input UpdateUserInput {
  email: String
  password: String
  firstName: String
  lastName: String
  role: Role
}

input CreateEquipmentTypeInput {
  description: String!
}

input UpdateEquipmentTypeInput {
  description: String
}

input CreateEquipmentInput {
  description: String!
  type: ID!
  owner: ID!
}

input UpdateEquipmentInput {
  description: String
  type: ID
}

input CreateAvailabilityInput {
  equipment: ID!
  start: DateTime!
  end: DateTime!
  booked: Boolean
  owner: ID!
}

input UpdateAvailabilityInput {
  start: DateTime
  end: DateTime
  booked: Boolean
}

type Mutation {
  signUp(data: SignUpInput!): User!
  createUser(data: CreateUserInput!): User @hasRole(roles:["ADMIN"])
  updateUser(id: ID!, data: UpdateUserInput): User @isAuthenticated
  createEquipmentType(data: CreateEquipmentTypeInput!): EquipmentType @hasRole(roles:["ADMIN"])
  updateEquipmentType(id: ID!, data: UpdateEquipmentTypeInput): EquipmentType @hasRole(roles:["ADMIN"])
  createEquipment(data: CreateEquipmentInput!): Equipment @isAuthenticated
  updateEquipment(id: ID!, data: UpdateEquipmentInput): Equipment @isAuthenticated
  createAvailability(data: CreateAvailabilityInput!): Availability @isAuthenticated
  updateAvailability(id: ID!, data: UpdateAvailabilityInput): Availability @isAuthenticated
}
