# This file contains the application server schema. Here we only
# expose fields we want accessible from the client.

directive @isAuthenticated(checkIfEmailIsVerified: Boolean = false) on FIELD | FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD | FIELD_DEFINITION
directive @date(format: String) on FIELD_DEFINITION

scalar DateTime

enum UserRole {
  ADMIN
  CLIENT
}

enum EquipmentStatus {
  DRAFT
  PUBLISHED
  BOOKED
}

enum ListingStatus {
  DRAFT
  PUBLISHED
  BOOKED
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  equipment: [Equipment!]
  listings: [Listing!]
}

type EquipmentType {
  id: ID!
  title: String!
  description: String!
  equipments: [Equipment!]
}

type Equipment {
  id: ID!
  title: String!
  description: String!
  status: EquipmentStatus!
  type: EquipmentType!
  owner: User!
  listings: [Listing!]
}

type Listing {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  status: ListingStatus!
  equipment: Equipment!
  owner: User!
}

type Query {
  me: User @isAuthenticated
  users: [User!] @hasRole(roles:["ADMIN"])
  user(id: ID!): User! @hasRole(roles:["ADMIN"])
  equipmentTypes: [EquipmentType!]
  equipmentType(id: ID!): EquipmentType!
  equipments: [Equipment!]
  equipment(id: ID!): Equipment!
  listings: [Listing!]
  listing(id: ID!): Listing!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  role: UserRole!
}

input UpdateUserInput {
  email: String
  password: String
  firstName: String
  lastName: String
  role: UserRole
}

input CreateEquipmentTypeInput {
  title: String!
  description: String!
}

input UpdateEquipmentTypeInput {
  title: String
  description: String
}

input CreateEquipmentInput {
  title: String!
  description: String!
  status: EquipmentStatus!
  type: ID!
  owner: ID!
}

input UpdateEquipmentInput {
  title: String
  description: String
  status: EquipmentStatus
  type: ID
}

input CreateListingInput {
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  status: ListingStatus!
  equipment: ID!
  owner: ID!
}

input UpdateListingInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  status: ListingStatus
  equipment: ID
}

type Mutation {
  signUp(data: SignUpInput!): User!
  createUser(data: CreateUserInput!): User @hasRole(roles: ["ADMIN"])
  updateUser(id: ID!, data: UpdateUserInput): User @isAuthenticated
  createEquipmentType(data: CreateEquipmentTypeInput!): EquipmentType @hasRole(roles: ["ADMIN"])
  updateEquipmentType(id: ID!, data: UpdateEquipmentTypeInput): EquipmentType @hasRole(roles: ["ADMIN"])
  createEquipment(data: CreateEquipmentInput!): Equipment @isAuthenticated
  updateEquipment(id: ID!, data: UpdateEquipmentInput): Equipment @isAuthenticated
  createListing(data: CreateListingInput!): Listing @isAuthenticated
  updateListing(id: ID!, data: UpdateListingInput): Listing @isAuthenticated
}
