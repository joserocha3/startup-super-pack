// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  equipment: (where?: EquipmentWhereInput) => Promise<boolean>;
  equipmentType: (where?: EquipmentTypeWhereInput) => Promise<boolean>;
  listing: (where?: ListingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  equipment: (where: EquipmentWhereUniqueInput) => EquipmentPromise;
  equipments: (
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Equipment>;
  equipmentsConnection: (
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EquipmentConnectionPromise;
  equipmentType: (where: EquipmentTypeWhereUniqueInput) => EquipmentTypePromise;
  equipmentTypes: (
    args?: {
      where?: EquipmentTypeWhereInput;
      orderBy?: EquipmentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EquipmentType>;
  equipmentTypesConnection: (
    args?: {
      where?: EquipmentTypeWhereInput;
      orderBy?: EquipmentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EquipmentTypeConnectionPromise;
  listing: (where: ListingWhereUniqueInput) => ListingPromise;
  listings: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Listing>;
  listingsConnection: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ListingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEquipment: (data: EquipmentCreateInput) => EquipmentPromise;
  updateEquipment: (
    args: { data: EquipmentUpdateInput; where: EquipmentWhereUniqueInput }
  ) => EquipmentPromise;
  updateManyEquipments: (
    args: {
      data: EquipmentUpdateManyMutationInput;
      where?: EquipmentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEquipment: (
    args: {
      where: EquipmentWhereUniqueInput;
      create: EquipmentCreateInput;
      update: EquipmentUpdateInput;
    }
  ) => EquipmentPromise;
  deleteEquipment: (where: EquipmentWhereUniqueInput) => EquipmentPromise;
  deleteManyEquipments: (where?: EquipmentWhereInput) => BatchPayloadPromise;
  createEquipmentType: (data: EquipmentTypeCreateInput) => EquipmentTypePromise;
  updateEquipmentType: (
    args: {
      data: EquipmentTypeUpdateInput;
      where: EquipmentTypeWhereUniqueInput;
    }
  ) => EquipmentTypePromise;
  updateManyEquipmentTypes: (
    args: {
      data: EquipmentTypeUpdateManyMutationInput;
      where?: EquipmentTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEquipmentType: (
    args: {
      where: EquipmentTypeWhereUniqueInput;
      create: EquipmentTypeCreateInput;
      update: EquipmentTypeUpdateInput;
    }
  ) => EquipmentTypePromise;
  deleteEquipmentType: (
    where: EquipmentTypeWhereUniqueInput
  ) => EquipmentTypePromise;
  deleteManyEquipmentTypes: (
    where?: EquipmentTypeWhereInput
  ) => BatchPayloadPromise;
  createListing: (data: ListingCreateInput) => ListingPromise;
  updateListing: (
    args: { data: ListingUpdateInput; where: ListingWhereUniqueInput }
  ) => ListingPromise;
  updateManyListings: (
    args: { data: ListingUpdateManyMutationInput; where?: ListingWhereInput }
  ) => BatchPayloadPromise;
  upsertListing: (
    args: {
      where: ListingWhereUniqueInput;
      create: ListingCreateInput;
      update: ListingUpdateInput;
    }
  ) => ListingPromise;
  deleteListing: (where: ListingWhereUniqueInput) => ListingPromise;
  deleteManyListings: (where?: ListingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  equipment: (
    where?: EquipmentSubscriptionWhereInput
  ) => EquipmentSubscriptionPayloadSubscription;
  equipmentType: (
    where?: EquipmentTypeSubscriptionWhereInput
  ) => EquipmentTypeSubscriptionPayloadSubscription;
  listing: (
    where?: ListingSubscriptionWhereInput
  ) => ListingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EquipmentStatus = "DRAFT" | "PUBLISHED" | "BOOKED";

export type UserRole = "ADMIN" | "CLIENT";

export type ListingStatus = "DRAFT" | "PUBLISHED" | "BOOKED";

export type EquipmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ListingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EquipmentTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "authId_ASC"
  | "authId_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EquipmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EquipmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  status?: EquipmentStatus;
  status_not?: EquipmentStatus;
  status_in?: EquipmentStatus[] | EquipmentStatus;
  status_not_in?: EquipmentStatus[] | EquipmentStatus;
  type?: EquipmentTypeWhereInput;
  owner?: UserWhereInput;
  listings_every?: ListingWhereInput;
  listings_some?: ListingWhereInput;
  listings_none?: ListingWhereInput;
  AND?: EquipmentWhereInput[] | EquipmentWhereInput;
  OR?: EquipmentWhereInput[] | EquipmentWhereInput;
  NOT?: EquipmentWhereInput[] | EquipmentWhereInput;
}

export interface EquipmentTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  equipments_every?: EquipmentWhereInput;
  equipments_some?: EquipmentWhereInput;
  equipments_none?: EquipmentWhereInput;
  AND?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
  OR?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
  NOT?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  authId?: String;
  authId_not?: String;
  authId_in?: String[] | String;
  authId_not_in?: String[] | String;
  authId_lt?: String;
  authId_lte?: String;
  authId_gt?: String;
  authId_gte?: String;
  authId_contains?: String;
  authId_not_contains?: String;
  authId_starts_with?: String;
  authId_not_starts_with?: String;
  authId_ends_with?: String;
  authId_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  equipments_every?: EquipmentWhereInput;
  equipments_some?: EquipmentWhereInput;
  equipments_none?: EquipmentWhereInput;
  listings_every?: ListingWhereInput;
  listings_some?: ListingWhereInput;
  listings_none?: ListingWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ListingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  status?: ListingStatus;
  status_not?: ListingStatus;
  status_in?: ListingStatus[] | ListingStatus;
  status_not_in?: ListingStatus[] | ListingStatus;
  equipment?: EquipmentWhereInput;
  owner?: UserWhereInput;
  AND?: ListingWhereInput[] | ListingWhereInput;
  OR?: ListingWhereInput[] | ListingWhereInput;
  NOT?: ListingWhereInput[] | ListingWhereInput;
}

export type EquipmentTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ListingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  authId?: String;
}>;

export interface EquipmentCreateInput {
  title: String;
  description: String;
  status: EquipmentStatus;
  type: EquipmentTypeCreateOneWithoutEquipmentsInput;
  owner: UserCreateOneWithoutEquipmentsInput;
  listings?: ListingCreateManyWithoutEquipmentInput;
}

export interface EquipmentTypeCreateOneWithoutEquipmentsInput {
  create?: EquipmentTypeCreateWithoutEquipmentsInput;
  connect?: EquipmentTypeWhereUniqueInput;
}

export interface EquipmentTypeCreateWithoutEquipmentsInput {
  title: String;
  description: String;
}

export interface UserCreateOneWithoutEquipmentsInput {
  create?: UserCreateWithoutEquipmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutEquipmentsInput {
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
  listings?: ListingCreateManyWithoutOwnerInput;
}

export interface ListingCreateManyWithoutOwnerInput {
  create?: ListingCreateWithoutOwnerInput[] | ListingCreateWithoutOwnerInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
}

export interface ListingCreateWithoutOwnerInput {
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  status: ListingStatus;
  equipment: EquipmentCreateOneWithoutListingsInput;
}

export interface EquipmentCreateOneWithoutListingsInput {
  create?: EquipmentCreateWithoutListingsInput;
  connect?: EquipmentWhereUniqueInput;
}

export interface EquipmentCreateWithoutListingsInput {
  title: String;
  description: String;
  status: EquipmentStatus;
  type: EquipmentTypeCreateOneWithoutEquipmentsInput;
  owner: UserCreateOneWithoutEquipmentsInput;
}

export interface ListingCreateManyWithoutEquipmentInput {
  create?:
    | ListingCreateWithoutEquipmentInput[]
    | ListingCreateWithoutEquipmentInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
}

export interface ListingCreateWithoutEquipmentInput {
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  status: ListingStatus;
  owner: UserCreateOneWithoutListingsInput;
}

export interface UserCreateOneWithoutListingsInput {
  create?: UserCreateWithoutListingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutListingsInput {
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
  equipments?: EquipmentCreateManyWithoutOwnerInput;
}

export interface EquipmentCreateManyWithoutOwnerInput {
  create?:
    | EquipmentCreateWithoutOwnerInput[]
    | EquipmentCreateWithoutOwnerInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
}

export interface EquipmentCreateWithoutOwnerInput {
  title: String;
  description: String;
  status: EquipmentStatus;
  type: EquipmentTypeCreateOneWithoutEquipmentsInput;
  listings?: ListingCreateManyWithoutEquipmentInput;
}

export interface EquipmentUpdateInput {
  title?: String;
  description?: String;
  status?: EquipmentStatus;
  type?: EquipmentTypeUpdateOneRequiredWithoutEquipmentsInput;
  owner?: UserUpdateOneRequiredWithoutEquipmentsInput;
  listings?: ListingUpdateManyWithoutEquipmentInput;
}

export interface EquipmentTypeUpdateOneRequiredWithoutEquipmentsInput {
  create?: EquipmentTypeCreateWithoutEquipmentsInput;
  update?: EquipmentTypeUpdateWithoutEquipmentsDataInput;
  upsert?: EquipmentTypeUpsertWithoutEquipmentsInput;
  connect?: EquipmentTypeWhereUniqueInput;
}

export interface EquipmentTypeUpdateWithoutEquipmentsDataInput {
  title?: String;
  description?: String;
}

export interface EquipmentTypeUpsertWithoutEquipmentsInput {
  update: EquipmentTypeUpdateWithoutEquipmentsDataInput;
  create: EquipmentTypeCreateWithoutEquipmentsInput;
}

export interface UserUpdateOneRequiredWithoutEquipmentsInput {
  create?: UserCreateWithoutEquipmentsInput;
  update?: UserUpdateWithoutEquipmentsDataInput;
  upsert?: UserUpsertWithoutEquipmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutEquipmentsDataInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
  listings?: ListingUpdateManyWithoutOwnerInput;
}

export interface ListingUpdateManyWithoutOwnerInput {
  create?: ListingCreateWithoutOwnerInput[] | ListingCreateWithoutOwnerInput;
  delete?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  disconnect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  update?:
    | ListingUpdateWithWhereUniqueWithoutOwnerInput[]
    | ListingUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | ListingUpsertWithWhereUniqueWithoutOwnerInput[]
    | ListingUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface ListingUpdateWithWhereUniqueWithoutOwnerInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutOwnerDataInput;
}

export interface ListingUpdateWithoutOwnerDataInput {
  title?: String;
  description?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  status?: ListingStatus;
  equipment?: EquipmentUpdateOneRequiredWithoutListingsInput;
}

export interface EquipmentUpdateOneRequiredWithoutListingsInput {
  create?: EquipmentCreateWithoutListingsInput;
  update?: EquipmentUpdateWithoutListingsDataInput;
  upsert?: EquipmentUpsertWithoutListingsInput;
  connect?: EquipmentWhereUniqueInput;
}

export interface EquipmentUpdateWithoutListingsDataInput {
  title?: String;
  description?: String;
  status?: EquipmentStatus;
  type?: EquipmentTypeUpdateOneRequiredWithoutEquipmentsInput;
  owner?: UserUpdateOneRequiredWithoutEquipmentsInput;
}

export interface EquipmentUpsertWithoutListingsInput {
  update: EquipmentUpdateWithoutListingsDataInput;
  create: EquipmentCreateWithoutListingsInput;
}

export interface ListingUpsertWithWhereUniqueWithoutOwnerInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutOwnerDataInput;
  create: ListingCreateWithoutOwnerInput;
}

export interface UserUpsertWithoutEquipmentsInput {
  update: UserUpdateWithoutEquipmentsDataInput;
  create: UserCreateWithoutEquipmentsInput;
}

export interface ListingUpdateManyWithoutEquipmentInput {
  create?:
    | ListingCreateWithoutEquipmentInput[]
    | ListingCreateWithoutEquipmentInput;
  delete?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  disconnect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  update?:
    | ListingUpdateWithWhereUniqueWithoutEquipmentInput[]
    | ListingUpdateWithWhereUniqueWithoutEquipmentInput;
  upsert?:
    | ListingUpsertWithWhereUniqueWithoutEquipmentInput[]
    | ListingUpsertWithWhereUniqueWithoutEquipmentInput;
}

export interface ListingUpdateWithWhereUniqueWithoutEquipmentInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutEquipmentDataInput;
}

export interface ListingUpdateWithoutEquipmentDataInput {
  title?: String;
  description?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  status?: ListingStatus;
  owner?: UserUpdateOneRequiredWithoutListingsInput;
}

export interface UserUpdateOneRequiredWithoutListingsInput {
  create?: UserCreateWithoutListingsInput;
  update?: UserUpdateWithoutListingsDataInput;
  upsert?: UserUpsertWithoutListingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutListingsDataInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
  equipments?: EquipmentUpdateManyWithoutOwnerInput;
}

export interface EquipmentUpdateManyWithoutOwnerInput {
  create?:
    | EquipmentCreateWithoutOwnerInput[]
    | EquipmentCreateWithoutOwnerInput;
  delete?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  disconnect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  update?:
    | EquipmentUpdateWithWhereUniqueWithoutOwnerInput[]
    | EquipmentUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | EquipmentUpsertWithWhereUniqueWithoutOwnerInput[]
    | EquipmentUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface EquipmentUpdateWithWhereUniqueWithoutOwnerInput {
  where: EquipmentWhereUniqueInput;
  data: EquipmentUpdateWithoutOwnerDataInput;
}

export interface EquipmentUpdateWithoutOwnerDataInput {
  title?: String;
  description?: String;
  status?: EquipmentStatus;
  type?: EquipmentTypeUpdateOneRequiredWithoutEquipmentsInput;
  listings?: ListingUpdateManyWithoutEquipmentInput;
}

export interface EquipmentUpsertWithWhereUniqueWithoutOwnerInput {
  where: EquipmentWhereUniqueInput;
  update: EquipmentUpdateWithoutOwnerDataInput;
  create: EquipmentCreateWithoutOwnerInput;
}

export interface UserUpsertWithoutListingsInput {
  update: UserUpdateWithoutListingsDataInput;
  create: UserCreateWithoutListingsInput;
}

export interface ListingUpsertWithWhereUniqueWithoutEquipmentInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutEquipmentDataInput;
  create: ListingCreateWithoutEquipmentInput;
}

export interface EquipmentUpdateManyMutationInput {
  title?: String;
  description?: String;
  status?: EquipmentStatus;
}

export interface EquipmentTypeCreateInput {
  title: String;
  description: String;
  equipments?: EquipmentCreateManyWithoutTypeInput;
}

export interface EquipmentCreateManyWithoutTypeInput {
  create?: EquipmentCreateWithoutTypeInput[] | EquipmentCreateWithoutTypeInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
}

export interface EquipmentCreateWithoutTypeInput {
  title: String;
  description: String;
  status: EquipmentStatus;
  owner: UserCreateOneWithoutEquipmentsInput;
  listings?: ListingCreateManyWithoutEquipmentInput;
}

export interface EquipmentTypeUpdateInput {
  title?: String;
  description?: String;
  equipments?: EquipmentUpdateManyWithoutTypeInput;
}

export interface EquipmentUpdateManyWithoutTypeInput {
  create?: EquipmentCreateWithoutTypeInput[] | EquipmentCreateWithoutTypeInput;
  delete?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  disconnect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  update?:
    | EquipmentUpdateWithWhereUniqueWithoutTypeInput[]
    | EquipmentUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | EquipmentUpsertWithWhereUniqueWithoutTypeInput[]
    | EquipmentUpsertWithWhereUniqueWithoutTypeInput;
}

export interface EquipmentUpdateWithWhereUniqueWithoutTypeInput {
  where: EquipmentWhereUniqueInput;
  data: EquipmentUpdateWithoutTypeDataInput;
}

export interface EquipmentUpdateWithoutTypeDataInput {
  title?: String;
  description?: String;
  status?: EquipmentStatus;
  owner?: UserUpdateOneRequiredWithoutEquipmentsInput;
  listings?: ListingUpdateManyWithoutEquipmentInput;
}

export interface EquipmentUpsertWithWhereUniqueWithoutTypeInput {
  where: EquipmentWhereUniqueInput;
  update: EquipmentUpdateWithoutTypeDataInput;
  create: EquipmentCreateWithoutTypeInput;
}

export interface EquipmentTypeUpdateManyMutationInput {
  title?: String;
  description?: String;
}

export interface ListingCreateInput {
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  status: ListingStatus;
  equipment: EquipmentCreateOneWithoutListingsInput;
  owner: UserCreateOneWithoutListingsInput;
}

export interface ListingUpdateInput {
  title?: String;
  description?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  status?: ListingStatus;
  equipment?: EquipmentUpdateOneRequiredWithoutListingsInput;
  owner?: UserUpdateOneRequiredWithoutListingsInput;
}

export interface ListingUpdateManyMutationInput {
  title?: String;
  description?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  status?: ListingStatus;
}

export interface UserCreateInput {
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
  equipments?: EquipmentCreateManyWithoutOwnerInput;
  listings?: ListingCreateManyWithoutOwnerInput;
}

export interface UserUpdateInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
  equipments?: EquipmentUpdateManyWithoutOwnerInput;
  listings?: ListingUpdateManyWithoutOwnerInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
}

export interface EquipmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EquipmentWhereInput;
  AND?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
  OR?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
  NOT?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
}

export interface EquipmentTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EquipmentTypeWhereInput;
  AND?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
  OR?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
  NOT?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
}

export interface ListingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ListingWhereInput;
  AND?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  OR?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  NOT?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Equipment {
  id: ID_Output;
  title: String;
  description: String;
  status: EquipmentStatus;
}

export interface EquipmentPromise extends Promise<Equipment>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<EquipmentStatus>;
  type: <T = EquipmentTypePromise>() => T;
  owner: <T = UserPromise>() => T;
  listings: <T = FragmentableArray<Listing>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EquipmentSubscription
  extends Promise<AsyncIterator<Equipment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<EquipmentStatus>>;
  type: <T = EquipmentTypeSubscription>() => T;
  owner: <T = UserSubscription>() => T;
  listings: <T = Promise<AsyncIterator<ListingSubscription>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EquipmentType {
  id: ID_Output;
  title: String;
  description: String;
}

export interface EquipmentTypePromise
  extends Promise<EquipmentType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  equipments: <T = FragmentableArray<Equipment>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EquipmentTypeSubscription
  extends Promise<AsyncIterator<EquipmentType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  equipments: <T = Promise<AsyncIterator<EquipmentSubscription>>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  authId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole>;
  equipments: <T = FragmentableArray<Equipment>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  listings: <T = FragmentableArray<Listing>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  authId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  equipments: <T = Promise<AsyncIterator<EquipmentSubscription>>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  listings: <T = Promise<AsyncIterator<ListingSubscription>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Listing {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
  status: ListingStatus;
}

export interface ListingPromise extends Promise<Listing>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  status: () => Promise<ListingStatus>;
  equipment: <T = EquipmentPromise>() => T;
  owner: <T = UserPromise>() => T;
}

export interface ListingSubscription
  extends Promise<AsyncIterator<Listing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ListingStatus>>;
  equipment: <T = EquipmentSubscription>() => T;
  owner: <T = UserSubscription>() => T;
}

export interface EquipmentConnection {}

export interface EquipmentConnectionPromise
  extends Promise<EquipmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EquipmentEdge>>() => T;
  aggregate: <T = AggregateEquipmentPromise>() => T;
}

export interface EquipmentConnectionSubscription
  extends Promise<AsyncIterator<EquipmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EquipmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEquipmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EquipmentEdge {
  cursor: String;
}

export interface EquipmentEdgePromise
  extends Promise<EquipmentEdge>,
    Fragmentable {
  node: <T = EquipmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EquipmentEdgeSubscription
  extends Promise<AsyncIterator<EquipmentEdge>>,
    Fragmentable {
  node: <T = EquipmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEquipment {
  count: Int;
}

export interface AggregateEquipmentPromise
  extends Promise<AggregateEquipment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEquipmentSubscription
  extends Promise<AsyncIterator<AggregateEquipment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EquipmentTypeConnection {}

export interface EquipmentTypeConnectionPromise
  extends Promise<EquipmentTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EquipmentTypeEdge>>() => T;
  aggregate: <T = AggregateEquipmentTypePromise>() => T;
}

export interface EquipmentTypeConnectionSubscription
  extends Promise<AsyncIterator<EquipmentTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EquipmentTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEquipmentTypeSubscription>() => T;
}

export interface EquipmentTypeEdge {
  cursor: String;
}

export interface EquipmentTypeEdgePromise
  extends Promise<EquipmentTypeEdge>,
    Fragmentable {
  node: <T = EquipmentTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EquipmentTypeEdgeSubscription
  extends Promise<AsyncIterator<EquipmentTypeEdge>>,
    Fragmentable {
  node: <T = EquipmentTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEquipmentType {
  count: Int;
}

export interface AggregateEquipmentTypePromise
  extends Promise<AggregateEquipmentType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEquipmentTypeSubscription
  extends Promise<AsyncIterator<AggregateEquipmentType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ListingConnection {}

export interface ListingConnectionPromise
  extends Promise<ListingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListingEdge>>() => T;
  aggregate: <T = AggregateListingPromise>() => T;
}

export interface ListingConnectionSubscription
  extends Promise<AsyncIterator<ListingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListingSubscription>() => T;
}

export interface ListingEdge {
  cursor: String;
}

export interface ListingEdgePromise extends Promise<ListingEdge>, Fragmentable {
  node: <T = ListingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListingEdgeSubscription
  extends Promise<AsyncIterator<ListingEdge>>,
    Fragmentable {
  node: <T = ListingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateListing {
  count: Int;
}

export interface AggregateListingPromise
  extends Promise<AggregateListing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListingSubscription
  extends Promise<AsyncIterator<AggregateListing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EquipmentSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EquipmentSubscriptionPayloadPromise
  extends Promise<EquipmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EquipmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EquipmentPreviousValuesPromise>() => T;
}

export interface EquipmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EquipmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EquipmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EquipmentPreviousValuesSubscription>() => T;
}

export interface EquipmentPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  status: EquipmentStatus;
}

export interface EquipmentPreviousValuesPromise
  extends Promise<EquipmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<EquipmentStatus>;
}

export interface EquipmentPreviousValuesSubscription
  extends Promise<AsyncIterator<EquipmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<EquipmentStatus>>;
}

export interface EquipmentTypeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EquipmentTypeSubscriptionPayloadPromise
  extends Promise<EquipmentTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EquipmentTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EquipmentTypePreviousValuesPromise>() => T;
}

export interface EquipmentTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EquipmentTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EquipmentTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EquipmentTypePreviousValuesSubscription>() => T;
}

export interface EquipmentTypePreviousValues {
  id: ID_Output;
  title: String;
  description: String;
}

export interface EquipmentTypePreviousValuesPromise
  extends Promise<EquipmentTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface EquipmentTypePreviousValuesSubscription
  extends Promise<AsyncIterator<EquipmentTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ListingSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ListingSubscriptionPayloadPromise
  extends Promise<ListingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListingPreviousValuesPromise>() => T;
}

export interface ListingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListingPreviousValuesSubscription>() => T;
}

export interface ListingPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
  status: ListingStatus;
}

export interface ListingPreviousValuesPromise
  extends Promise<ListingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  status: () => Promise<ListingStatus>;
}

export interface ListingPreviousValuesSubscription
  extends Promise<AsyncIterator<ListingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ListingStatus>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  authId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  authId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Equipment",
    embedded: false
  },
  {
    name: "EquipmentStatus",
    embedded: false
  },
  {
    name: "EquipmentType",
    embedded: false
  },
  {
    name: "Listing",
    embedded: false
  },
  {
    name: "ListingStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
