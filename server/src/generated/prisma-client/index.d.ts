// Code generated by Prisma (prisma@1.19.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  availability: (where?: AvailabilityWhereInput) => Promise<boolean>;
  equipment: (where?: EquipmentWhereInput) => Promise<boolean>;
  equipmentType: (where?: EquipmentTypeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  availability: (where: AvailabilityWhereUniqueInput) => Availability;
  availabilities: (
    args?: {
      where?: AvailabilityWhereInput;
      orderBy?: AvailabilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AvailabilityNode>;
  availabilitiesConnection: (
    args?: {
      where?: AvailabilityWhereInput;
      orderBy?: AvailabilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AvailabilityConnection;
  equipment: (where: EquipmentWhereUniqueInput) => Equipment;
  equipments: (
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EquipmentNode>;
  equipmentsConnection: (
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EquipmentConnection;
  equipmentType: (where: EquipmentTypeWhereUniqueInput) => EquipmentType;
  equipmentTypes: (
    args?: {
      where?: EquipmentTypeWhereInput;
      orderBy?: EquipmentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EquipmentTypeNode>;
  equipmentTypesConnection: (
    args?: {
      where?: EquipmentTypeWhereInput;
      orderBy?: EquipmentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EquipmentTypeConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAvailability: (data: AvailabilityCreateInput) => Availability;
  updateAvailability: (
    args: { data: AvailabilityUpdateInput; where: AvailabilityWhereUniqueInput }
  ) => Availability;
  updateManyAvailabilities: (
    args: { data: AvailabilityUpdateInput; where?: AvailabilityWhereInput }
  ) => BatchPayload;
  upsertAvailability: (
    args: {
      where: AvailabilityWhereUniqueInput;
      create: AvailabilityCreateInput;
      update: AvailabilityUpdateInput;
    }
  ) => Availability;
  deleteAvailability: (where: AvailabilityWhereUniqueInput) => Availability;
  deleteManyAvailabilities: (where?: AvailabilityWhereInput) => BatchPayload;
  createEquipment: (data: EquipmentCreateInput) => Equipment;
  updateEquipment: (
    args: { data: EquipmentUpdateInput; where: EquipmentWhereUniqueInput }
  ) => Equipment;
  updateManyEquipments: (
    args: { data: EquipmentUpdateInput; where?: EquipmentWhereInput }
  ) => BatchPayload;
  upsertEquipment: (
    args: {
      where: EquipmentWhereUniqueInput;
      create: EquipmentCreateInput;
      update: EquipmentUpdateInput;
    }
  ) => Equipment;
  deleteEquipment: (where: EquipmentWhereUniqueInput) => Equipment;
  deleteManyEquipments: (where?: EquipmentWhereInput) => BatchPayload;
  createEquipmentType: (data: EquipmentTypeCreateInput) => EquipmentType;
  updateEquipmentType: (
    args: {
      data: EquipmentTypeUpdateInput;
      where: EquipmentTypeWhereUniqueInput;
    }
  ) => EquipmentType;
  updateManyEquipmentTypes: (
    args: { data: EquipmentTypeUpdateInput; where?: EquipmentTypeWhereInput }
  ) => BatchPayload;
  upsertEquipmentType: (
    args: {
      where: EquipmentTypeWhereUniqueInput;
      create: EquipmentTypeCreateInput;
      update: EquipmentTypeUpdateInput;
    }
  ) => EquipmentType;
  deleteEquipmentType: (where: EquipmentTypeWhereUniqueInput) => EquipmentType;
  deleteManyEquipmentTypes: (where?: EquipmentTypeWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  availability: (
    where?: AvailabilitySubscriptionWhereInput
  ) => AvailabilitySubscriptionPayloadSubscription;
  equipment: (
    where?: EquipmentSubscriptionWhereInput
  ) => EquipmentSubscriptionPayloadSubscription;
  equipmentType: (
    where?: EquipmentTypeSubscriptionWhereInput
  ) => EquipmentTypeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "ADMIN" | "CLIENT";

export type EquipmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AvailabilityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "booked_ASC"
  | "booked_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EquipmentTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "authId_ASC"
  | "authId_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AvailabilityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EquipmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  type?: EquipmentTypeWhereInput;
  owner?: UserWhereInput;
  AND?: EquipmentWhereInput[] | EquipmentWhereInput;
  OR?: EquipmentWhereInput[] | EquipmentWhereInput;
  NOT?: EquipmentWhereInput[] | EquipmentWhereInput;
}

export interface EquipmentTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
  OR?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
  NOT?: EquipmentTypeWhereInput[] | EquipmentTypeWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  authId?: String;
  authId_not?: String;
  authId_in?: String[] | String;
  authId_not_in?: String[] | String;
  authId_lt?: String;
  authId_lte?: String;
  authId_gt?: String;
  authId_gte?: String;
  authId_contains?: String;
  authId_not_contains?: String;
  authId_starts_with?: String;
  authId_not_starts_with?: String;
  authId_ends_with?: String;
  authId_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  equipment_every?: EquipmentWhereInput;
  equipment_some?: EquipmentWhereInput;
  equipment_none?: EquipmentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AvailabilityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  equipment?: EquipmentWhereInput;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  booked?: Boolean;
  booked_not?: Boolean;
  AND?: AvailabilityWhereInput[] | AvailabilityWhereInput;
  OR?: AvailabilityWhereInput[] | AvailabilityWhereInput;
  NOT?: AvailabilityWhereInput[] | AvailabilityWhereInput;
}

export type EquipmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type EquipmentTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  authId?: String;
}>;

export interface AvailabilityCreateInput {
  equipment: EquipmentCreateOneInput;
  start: DateTimeInput;
  end: DateTimeInput;
  booked?: Boolean;
}

export interface EquipmentCreateOneInput {
  create?: EquipmentCreateInput;
  connect?: EquipmentWhereUniqueInput;
}

export interface EquipmentCreateInput {
  description: String;
  type: EquipmentTypeCreateOneInput;
  owner: UserCreateOneWithoutEquipmentInput;
}

export interface EquipmentTypeCreateOneInput {
  create?: EquipmentTypeCreateInput;
  connect?: EquipmentTypeWhereUniqueInput;
}

export interface EquipmentTypeCreateInput {
  description: String;
}

export interface UserCreateOneWithoutEquipmentInput {
  create?: UserCreateWithoutEquipmentInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutEquipmentInput {
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
}

export interface AvailabilityUpdateInput {
  equipment?: EquipmentUpdateOneRequiredInput;
  start?: DateTimeInput;
  end?: DateTimeInput;
  booked?: Boolean;
}

export interface EquipmentUpdateOneRequiredInput {
  create?: EquipmentCreateInput;
  update?: EquipmentUpdateDataInput;
  upsert?: EquipmentUpsertNestedInput;
  connect?: EquipmentWhereUniqueInput;
}

export interface EquipmentUpdateDataInput {
  description?: String;
  type?: EquipmentTypeUpdateOneRequiredInput;
  owner?: UserUpdateOneRequiredWithoutEquipmentInput;
}

export interface EquipmentTypeUpdateOneRequiredInput {
  create?: EquipmentTypeCreateInput;
  update?: EquipmentTypeUpdateDataInput;
  upsert?: EquipmentTypeUpsertNestedInput;
  connect?: EquipmentTypeWhereUniqueInput;
}

export interface EquipmentTypeUpdateDataInput {
  description?: String;
}

export interface EquipmentTypeUpsertNestedInput {
  update: EquipmentTypeUpdateDataInput;
  create: EquipmentTypeCreateInput;
}

export interface UserUpdateOneRequiredWithoutEquipmentInput {
  create?: UserCreateWithoutEquipmentInput;
  update?: UserUpdateWithoutEquipmentDataInput;
  upsert?: UserUpsertWithoutEquipmentInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutEquipmentDataInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
}

export interface UserUpsertWithoutEquipmentInput {
  update: UserUpdateWithoutEquipmentDataInput;
  create: UserCreateWithoutEquipmentInput;
}

export interface EquipmentUpsertNestedInput {
  update: EquipmentUpdateDataInput;
  create: EquipmentCreateInput;
}

export interface EquipmentUpdateInput {
  description?: String;
  type?: EquipmentTypeUpdateOneRequiredInput;
  owner?: UserUpdateOneRequiredWithoutEquipmentInput;
}

export interface EquipmentTypeUpdateInput {
  description?: String;
}

export interface UserCreateInput {
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
  equipment?: EquipmentCreateManyWithoutOwnerInput;
}

export interface EquipmentCreateManyWithoutOwnerInput {
  create?:
    | EquipmentCreateWithoutOwnerInput[]
    | EquipmentCreateWithoutOwnerInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
}

export interface EquipmentCreateWithoutOwnerInput {
  description: String;
  type: EquipmentTypeCreateOneInput;
}

export interface UserUpdateInput {
  email?: String;
  authId?: String;
  firstName?: String;
  lastName?: String;
  role?: UserRole;
  equipment?: EquipmentUpdateManyWithoutOwnerInput;
}

export interface EquipmentUpdateManyWithoutOwnerInput {
  create?:
    | EquipmentCreateWithoutOwnerInput[]
    | EquipmentCreateWithoutOwnerInput;
  delete?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  connect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  disconnect?: EquipmentWhereUniqueInput[] | EquipmentWhereUniqueInput;
  update?:
    | EquipmentUpdateWithWhereUniqueWithoutOwnerInput[]
    | EquipmentUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | EquipmentUpsertWithWhereUniqueWithoutOwnerInput[]
    | EquipmentUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface EquipmentUpdateWithWhereUniqueWithoutOwnerInput {
  where: EquipmentWhereUniqueInput;
  data: EquipmentUpdateWithoutOwnerDataInput;
}

export interface EquipmentUpdateWithoutOwnerDataInput {
  description?: String;
  type?: EquipmentTypeUpdateOneRequiredInput;
}

export interface EquipmentUpsertWithWhereUniqueWithoutOwnerInput {
  where: EquipmentWhereUniqueInput;
  update: EquipmentUpdateWithoutOwnerDataInput;
  create: EquipmentCreateWithoutOwnerInput;
}

export interface AvailabilitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AvailabilityWhereInput;
  AND?:
    | AvailabilitySubscriptionWhereInput[]
    | AvailabilitySubscriptionWhereInput;
  OR?:
    | AvailabilitySubscriptionWhereInput[]
    | AvailabilitySubscriptionWhereInput;
  NOT?:
    | AvailabilitySubscriptionWhereInput[]
    | AvailabilitySubscriptionWhereInput;
}

export interface EquipmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EquipmentWhereInput;
  AND?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
  OR?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
  NOT?: EquipmentSubscriptionWhereInput[] | EquipmentSubscriptionWhereInput;
}

export interface EquipmentTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EquipmentTypeWhereInput;
  AND?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
  OR?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
  NOT?:
    | EquipmentTypeSubscriptionWhereInput[]
    | EquipmentTypeSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AvailabilityNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
  booked: Boolean;
}

export interface Availability extends Promise<AvailabilityNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  equipment: <T = Equipment>() => T;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  booked: () => Promise<Boolean>;
}

export interface AvailabilitySubscription
  extends Promise<AsyncIterator<AvailabilityNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  equipment: <T = EquipmentSubscription>() => T;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  booked: () => Promise<AsyncIterator<Boolean>>;
}

export interface EquipmentNode {
  id: ID_Output;
  description: String;
}

export interface Equipment extends Promise<EquipmentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  type: <T = EquipmentType>() => T;
  owner: <T = User>() => T;
}

export interface EquipmentSubscription
  extends Promise<AsyncIterator<EquipmentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  type: <T = EquipmentTypeSubscription>() => T;
  owner: <T = UserSubscription>() => T;
}

export interface EquipmentTypeNode {
  id: ID_Output;
  description: String;
}

export interface EquipmentType
  extends Promise<EquipmentTypeNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface EquipmentTypeSubscription
  extends Promise<AsyncIterator<EquipmentTypeNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  authId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole>;
  equipment: <T = FragmentableArray<EquipmentNode>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  authId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  equipment: <T = Promise<AsyncIterator<EquipmentSubscription>>>(
    args?: {
      where?: EquipmentWhereInput;
      orderBy?: EquipmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AvailabilityConnectionNode {}

export interface AvailabilityConnection
  extends Promise<AvailabilityConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<AvailabilityEdgeNode>>() => T;
  aggregate: <T = AggregateAvailability>() => T;
}

export interface AvailabilityConnectionSubscription
  extends Promise<AsyncIterator<AvailabilityConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AvailabilityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAvailabilitySubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AvailabilityEdgeNode {
  cursor: String;
}

export interface AvailabilityEdge
  extends Promise<AvailabilityEdgeNode>,
    Fragmentable {
  node: <T = Availability>() => T;
  cursor: () => Promise<String>;
}

export interface AvailabilityEdgeSubscription
  extends Promise<AsyncIterator<AvailabilityEdgeNode>>,
    Fragmentable {
  node: <T = AvailabilitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAvailabilityNode {
  count: Int;
}

export interface AggregateAvailability
  extends Promise<AggregateAvailabilityNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAvailabilitySubscription
  extends Promise<AsyncIterator<AggregateAvailabilityNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EquipmentConnectionNode {}

export interface EquipmentConnection
  extends Promise<EquipmentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<EquipmentEdgeNode>>() => T;
  aggregate: <T = AggregateEquipment>() => T;
}

export interface EquipmentConnectionSubscription
  extends Promise<AsyncIterator<EquipmentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EquipmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEquipmentSubscription>() => T;
}

export interface EquipmentEdgeNode {
  cursor: String;
}

export interface EquipmentEdge
  extends Promise<EquipmentEdgeNode>,
    Fragmentable {
  node: <T = Equipment>() => T;
  cursor: () => Promise<String>;
}

export interface EquipmentEdgeSubscription
  extends Promise<AsyncIterator<EquipmentEdgeNode>>,
    Fragmentable {
  node: <T = EquipmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEquipmentNode {
  count: Int;
}

export interface AggregateEquipment
  extends Promise<AggregateEquipmentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEquipmentSubscription
  extends Promise<AsyncIterator<AggregateEquipmentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EquipmentTypeConnectionNode {}

export interface EquipmentTypeConnection
  extends Promise<EquipmentTypeConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<EquipmentTypeEdgeNode>>() => T;
  aggregate: <T = AggregateEquipmentType>() => T;
}

export interface EquipmentTypeConnectionSubscription
  extends Promise<AsyncIterator<EquipmentTypeConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EquipmentTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEquipmentTypeSubscription>() => T;
}

export interface EquipmentTypeEdgeNode {
  cursor: String;
}

export interface EquipmentTypeEdge
  extends Promise<EquipmentTypeEdgeNode>,
    Fragmentable {
  node: <T = EquipmentType>() => T;
  cursor: () => Promise<String>;
}

export interface EquipmentTypeEdgeSubscription
  extends Promise<AsyncIterator<EquipmentTypeEdgeNode>>,
    Fragmentable {
  node: <T = EquipmentTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEquipmentTypeNode {
  count: Int;
}

export interface AggregateEquipmentType
  extends Promise<AggregateEquipmentTypeNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEquipmentTypeSubscription
  extends Promise<AsyncIterator<AggregateEquipmentTypeNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AvailabilitySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AvailabilitySubscriptionPayload
  extends Promise<AvailabilitySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Availability>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AvailabilityPreviousValues>() => T;
}

export interface AvailabilitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AvailabilitySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AvailabilitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AvailabilityPreviousValuesSubscription>() => T;
}

export interface AvailabilityPreviousValuesNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
  booked: Boolean;
}

export interface AvailabilityPreviousValues
  extends Promise<AvailabilityPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  booked: () => Promise<Boolean>;
}

export interface AvailabilityPreviousValuesSubscription
  extends Promise<AsyncIterator<AvailabilityPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  booked: () => Promise<AsyncIterator<Boolean>>;
}

export interface EquipmentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EquipmentSubscriptionPayload
  extends Promise<EquipmentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Equipment>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EquipmentPreviousValues>() => T;
}

export interface EquipmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EquipmentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EquipmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EquipmentPreviousValuesSubscription>() => T;
}

export interface EquipmentPreviousValuesNode {
  id: ID_Output;
  description: String;
}

export interface EquipmentPreviousValues
  extends Promise<EquipmentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface EquipmentPreviousValuesSubscription
  extends Promise<AsyncIterator<EquipmentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface EquipmentTypeSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EquipmentTypeSubscriptionPayload
  extends Promise<EquipmentTypeSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EquipmentType>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EquipmentTypePreviousValues>() => T;
}

export interface EquipmentTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EquipmentTypeSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EquipmentTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EquipmentTypePreviousValuesSubscription>() => T;
}

export interface EquipmentTypePreviousValuesNode {
  id: ID_Output;
  description: String;
}

export interface EquipmentTypePreviousValues
  extends Promise<EquipmentTypePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface EquipmentTypePreviousValuesSubscription
  extends Promise<AsyncIterator<EquipmentTypePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  authId?: String;
  firstName: String;
  lastName: String;
  role: UserRole;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  authId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  authId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
